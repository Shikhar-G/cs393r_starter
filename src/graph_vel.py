from matplotlib import pyplot as plt
import numpy as np


measured_vel = [0, -0.45, -0.18, 0.265049, 0.786129, 0.986212, 0.944839, 0.944839, 0.672032, 0.143678, -0.396322, -0.936322, -0.981574, -0.769756, -0.499756, -0.279786, 0.260214, 0.800214, 0.990734, 0.998729, 0.852199, 0.406918, -0.133082, -0.673082, -0.995862, -0.917467, -0.917467, -0.524601, 0.0153987, 0.555399, 0.825399, 0.973144, 0.964484, 0.629443, 0.118684, -0.421316, -0.93096, -0.99207, -0.810482, -0.720482, -0.250266, 0.289734, 0.829734, 0.99987, 0.99987, 0.79465, 0.373343, 0.103343, -0.706657, -0.987725, -0.941734, -0.851734, -0.485303, 0.044205, 0.314205, 0.854205, 0.97985, 0.88985, 0.58397, 0.0906622, -0.179338, -0.449338, -0.904667, -0.908206, -0.847368, -0.218865, 0.0511353, 0.591135, 0.999251, 0.913833, 0.733833, 0.33711, -0.20289, -0.47289, -0.74289, -0.961995, -0.781995, -0.711597, -0.441597, 0.611185, 0.873612, 0.988901, 0.808901, 0.534951, 0.332103, -0.207897, -0.747897, -0.96454, -0.880626, -0.610626, -0.455818, -0.185818, 0.354182, 0.887361, 0.93848, 0.66848, 0.298069, 0.0361914, -0.233809, -0.773809, -0.977958, -0.977958, -0.668328, -0.173003, 0.0969971, 0.366997, 0.997634, 0.842857, 0.482857, 0.0312177, -0.238782, -0.508782, -0.997337, -0.910301, -0.820301, -0.600407, -0.150407, 0.389593, 0.929593, 0.959571, 0.707275, 0.527275, 0.28175, -0.25825, -0.79825, -0.98974, -0.89974, -0.800031, -0.414479, 0.125521, 0.665521, 0.87848, 0.876434, 0.538492, 0.268492, -0.00150783, -0.541508, -0.990262, -0.935764, -0.935764, -0.652082, -0.118996, 0.421004, 0.691004, 0.960759, 0.752734, 0.482734, 0.254772, -0.285228, -0.825228, -0.997012, -0.837956, -0.837956, -0.383399, 0.156601, 0.426601, 0.6966, 0.906646, 0.636646, 0.502967, -0.0370328, -0.577033, -0.847033, -0.978913, -0.957039, -0.611178, -0.0933638, 0.446636, 0.940086, 0.988436, 0.988436, 0.704565, 0.226443, -0.313557, -0.583557, -0.853557, -0.99994, -0.78242, -0.351035, -0.0810353, 0.188965, 0.991462, 0.932677, 0.645331, 0.19994, -0.0700604, -0.34006, -0.88006, -0.974114, -0.884114, -0.566923, -0.0664212, 0.203579, 0.473579, 0.915518, 0.906294, 0.653076, 0.195888, -0.344112, -0.614112, -0.849724, -0.908444, -0.722758, -0.5862, 0.2238, 0.7638, 0.980633, 0.95443, 0.77443, 0.424565, 0.174901, -0.0950985, -0.635098, -0.986997, -0.806997, -0.519033, -0.0380176, 0.231982, 0.501982, 0.976756, 0.867921, 0.597921, 0.433605, 0.163605, -0.376395, -0.902935, -0.992577, -0.929362, -0.548518, -0.278518, 0.52852, 0.79852, 0.972215, 0.740776, 0.380776, 0.147712, -0.122288, -0.662288, -0.995446, -0.828288, -0.738288, -0.278072, 0.261928, 0.531928, 0.998961, 0.898839, 0.808839, 0.398527, -0.141473, -0.411473, -0.681473, -0.982436, -0.861696, -0.687725, 0.0140865, 0.284086, 0.824086, 0.985511, 0.783282, 0.603282, 0.389801, -0.150199, -0.690199, -0.891221, -0.863209, -0.515871, -0.245871, 0.0241293, 0.564129, 0.993658, 0.925878, 0.835878, 0.406477, 0.136477, -0.403523, -0.81898, -0.965317, -0.965317, -0.734568, -0.319265, 0.220735, 0.760735, 0.994578, 0.823067, 0.643067, 0.450131, -0.0898688, -0.629869, -0.858838, -0.999262, -0.714995, -0.301403, -0.0314035, 0.508597, 0.98396, 0.948971, 0.768971, 0.4113, -0.112472, -0.382472, -0.652472, -0.984017, -0.804017, -0.508398, -0.291652, -0.0216525, 0.473348, 0.940007, 0.864311, 0.858883, 0.19334, -0.34666, -0.61666, -0.867995, -0.922768, -0.697768, -0.580116, -0.310116, 0.229884, 0.969933, 0.967887, 0.742887, 0.414014, 0.176466, -0.0935342, -0.633534, -0.993663, -0.993663, -0.503152, -0.0365698, 0.23343, 0.50343, 0.998315, 0.891221, 0.846221, 0.429539, -0.110461] # add vals
cmd_vel = [-0.56035, -0.0949508, 0.393571, 0.786129, 0.986212, 0.944839, 0.672032, 0.233678, -0.260137, -0.691168, -0.953127, -0.981574, -0.769756, -0.369786, 0.121341, 0.58232, 0.900734, 0.998729, 0.852199, 0.496918, 0.0200385, -0.461747, -0.830256, -0.995862, -0.917467, -0.614601, -0.161046, 0.332131, 0.743494, 0.973144, 0.964484, 0.719443, 0.298684, -0.195246, -0.641522, -0.93096, -0.99207, -0.810482, -0.430266, 0.0550932, 0.526839, 0.870086, 0.99987, 0.88465, 0.553343, 0.0862764, -0.40192, -0.791895, -0.987725, -0.941734, -0.665303, -0.225795, 0.268365, 0.697499, 0.955759, 0.97985, 0.76397, 0.360662, -0.130281, -0.589783, -0.904667, -0.998206, -0.847368, -0.488865, -0.0109708, 0.470028, 0.835445, 0.999251, 0.913833, 0.60711, 0.151973, -0.341779, -0.74953, -0.976056, -0.961995, -0.711597, -0.288815, 0.207633, 0.648612, 0.934222, 0.988901, 0.804951, 0.422103, -0.0643553, -0.534728, -0.874541, -0.999979, -0.880626, -0.545818, -0.0771048, 0.410131, 0.797361, 0.989047, 0.93848, 0.658069, 0.216191, -0.277299, -0.704194, -0.958293, -0.977958, -0.758328, -0.353003, 0.138866, 0.596586, 0.908321, 0.997634, 0.842857, 0.481218, 0.00250868, -0.477041, -0.840171, -0.997337, -0.910301, -0.600407, -0.143448, 0.348583, 0.75527, 0.977039, 0.959571, 0.707275, 0.28175, -0.212684, -0.655185, -0.937189, -0.98974, -0.800031, -0.414479, 0.0725884, 0.541979, 0.87848, 0.999998, 0.876434, 0.538492, 0.0686726, -0.417855, -0.802533, -0.990262, -0.935764, -0.652082, -0.208996, 0.285485, 0.71, 0.960759, 0.976181, 0.752734, 0.344772, -0.147536, -0.603694, -0.912009, -0.997012, -0.837956, -0.473399, 0.00644951, 0.485329, 0.844801, 0.997931, 0.906646, 0.592967, 0.134793, -0.357108, -0.760968, -0.978913, -0.957039, -0.701178, -0.273364, 0.221425, 0.661887, 0.940086, 0.988436, 0.794565, 0.406443, -0.0815086, -0.549584, -0.882472, -0.99994, -0.872419, -0.531035, -0.0603079, 0.425673, 0.807362, 0.991462, 0.932677, 0.645331, 0.19994, -0.294154, -0.716455, -0.963203, -0.974114, -0.746923, -0.336421, 0.156319, 0.610648, 0.915518, 0.996294, 0.833076, 0.465888, -0.0153118, -0.492627, -0.849724, -0.998444, -0.902758, -0.5862, -0.126002, 0.365134, 0.766781, 0.980633, 0.95443, 0.694565, 0.264901, -0.230282, -0.66832, -0.943328, -0.986997, -0.789033, -0.398018, 0.0902399, 0.557049, 0.886756, 0.999805, 0.867921, 0.523605, 0.0510893, -0.433899, -0.812935, -0.992577, -0.929362, -0.638518, -0.19148, 0.302035, 0.722681, 0.965517, 0.972215, 0.740776, 0.327712, -0.164965, -0.617591, -0.919132, -0.995446, -0.828288, -0.458072, 0.0239937, 0.501414, 0.854425, 0.998961, 0.898839, 0.578527, 0.11689, -0.373728, -0.772639, -0.982436, -0.951696, -0.687725, -0.255914, 0.239523, 0.675216, 0.946497, 0.985511, 0.783282, 0.389801, -0.099712, -0.564347, -0.891221, -0.999581, -0.863209, -0.515871, -0.0417331, 0.442158, 0.818198, 0.993658, 0.925878, 0.631477, 0.180493, -0.311396, -0.72898, -0.973744, -0.965317, -0.734568, -0.319265, 0.173959, 0.624916, 0.922667, 0.994578, 0.823067, 0.450131, -0.0332342, -0.508175, -0.858838, -0.999262, -0.894995, -0.571403, -0.108497, 0.381571, 0.777935, 0.98396, 0.948971, 0.6813, 0.247528, -0.247224, -0.681372, -0.948848, -0.984017, -0.778398, -0.381652, 0.107871, 0.571055, 0.895007, 0.999311, 0.858883, 0.50834, 0.0331433, -0.44995, -0.822995, -0.994551, -0.922768, -0.625116, -0.174264, 0.319185, 0.7345, 0.969933, 0.967887, 0.729014, 0.311466, -0.182252, -0.631485, -0.925997, -0.993663, -0.818152, -0.44157, 0.0420488, 0.515733, 0.863315, 0.999581, 0.891221, 0.564539, 0.0998378, -0.38947, -0.783568] # add vals
time = [250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1450, 1500, 1550, 1600, 1650, 1700, 1750, 1800, 1850, 1900, 1950, 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 2400, 2450, 2500, 2550, 2600, 2650, 2700, 2750, 2800, 2850, 2900, 2950, 3000, 3050, 3100, 3150, 3200, 3250, 3300, 3350, 3400, 3450, 3500, 3550, 3612, 3650, 3700, 3750, 3800, 3850, 3900, 3950, 4000, 4050, 4100, 4150, 4200, 4251, 4300, 4350, 4400, 4450, 4500, 4550, 4600, 4650, 4700, 4750, 4800, 4850, 4900, 4950, 5000, 5050, 5100, 5150, 5200, 5250, 5300, 5350, 5400, 5450, 5500, 5550, 5600, 5650, 5700, 5750, 5800, 5850, 5900, 5950, 6000, 6050, 6100, 6150, 6200, 6250, 6300, 6350, 6400, 6450, 6500, 6550, 6600, 6650, 6700, 6750, 6800, 6850, 6900, 6950, 7000, 7050, 7100, 7150, 7200, 7250, 7300, 7350, 7400, 7450, 7500, 7550, 7600, 7650, 7700, 7750, 7800, 7850, 7900, 7950, 8000, 8050, 8100, 8150, 8200, 8250, 8300, 8350, 8400, 8450, 8500, 8550, 8600, 8650, 8700, 8750, 8800, 8850, 8900, 8950, 9000, 9050, 9100, 9150, 9200, 9250, 9300, 9350, 9400, 9450, 9500, 9550, 9600, 9650, 9700, 9750, 9800, 9850, 9900, 9950, 10000, 10050, 10100, 10150, 10200, 10250, 10300, 10350, 10400, 10450, 10500, 10550, 10600, 10650, 10700, 10750, 10800, 10850, 10900, 10950, 11000, 11050, 11100, 11150, 11200, 11250, 11300, 11350, 11400, 11450, 11500, 11550, 11600, 11650, 11700, 11750, 11800, 11850, 11900, 11950, 12000, 12050, 12100, 12150, 12200, 12250, 12300, 12350, 12400, 12450, 12500, 12550, 12600, 12650, 12700, 12750, 12800, 12850, 12900, 12950, 13000, 13050, 13100, 13150, 13200, 13250, 13300, 13350, 13400, 13450, 13500, 13550, 13600, 13650, 13700, 13750, 13800, 13850, 13900, 13952, 14002, 14050, 14100, 14150, 14200, 14250, 14300, 14350, 14400, 14450, 14500, 14550, 14600, 14650, 14700, 14750, 14800, 14850, 14900, 14950, 15000, 15050, 15100, 15150, 15200, 15250, 15300, 15350, 15400, 15450, 15500, 15550, 15600, 15650, 15700, 15750, 15800, 15850, 15900, 15950, 16000, 16050, 16100, 16150, 16200, 16250, 16300, 16350, 16400, 16450, 16500, 16550, 16600, 16650, 16700, 16750, 16800, 16850, 16900, 16950, 17000, 17050] # add vals

# shift all time values to start from 0
time = [t - time[0] for t in time]
# truncate the arrays in half
measured_vel = measured_vel[: len(measured_vel) // 4 - 25]
cmd_vel = cmd_vel[: len(cmd_vel) // 4 - 25]
time = time[: len(time) // 4 - 25]
#
# plt.plot(time, measured_vel, label="measured")
# plt.plot(time, cmd_vel, label="cmd")
# plt.legend()
# plt.xlabel("time (ms)")
# plt.ylabel("velocity (m/s)")
# plt.show()


diffs = []
measured_vel = np.array(measured_vel)
cmd_vel = np.array(cmd_vel)
# TODO: change this based on the approx phase length observed
approx_phase_length = 10
for i in range(0, len(time), approx_phase_length):
    peak_cmd = np.argmax(cmd_vel[i : min(i + approx_phase_length, len(cmd_vel))]) + i
    peak_cmd_vel = cmd_vel[peak_cmd]
    # find where the measure velocity matches the peak_cmd_vel
    peak_measured = np.where(abs(measured_vel[peak_cmd : min(peak_cmd + approx_phase_length, len(measured_vel))] - peak_cmd_vel) < 0.01 )[0][0] + peak_cmd
    diffs.append((peak_measured - peak_cmd) * 50)
    # peak_measured = np.argmax(measured_vel[i : min(i + approx_phase_length, len(measured_vel))]) + i
#     diffs.append((peak_measured - peak_cmd) * 50)
#     print("Peak cmd: ", peak_cmd, cmd_vel[peak_cmd])
#     print("Peak measured: ", peak_measured, measured_vel[peak_measured])

print("Average difference: ", np.mean(diffs))
